{"version":3,"sources":["components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","city","setCity","search","setSearch","useEffect","fetchApi","a","url","fetch","response","json","resJson","main","className","type","placeholder","value","onChange","event","target","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA8CeA,EA3CF,WAEX,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KAYA,OAVAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,gCAAAC,EAAA,6DACTC,EADS,2DACiDL,EADjD,iEAEQM,MAAMD,GAFd,cAETE,EAFS,gBAGOA,EAASC,OAHhB,OAGTC,EAHS,OAIfV,EAAQU,EAAQC,MAJD,2CAAH,qDAMdP,MACC,CAACH,IAGF,qBAAKW,UAAU,IAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBAAOC,KAAK,OAAOC,YAAY,aAC/BC,MAAOd,EACPW,UAAU,eACVI,SAAU,SAACC,GACPf,EAAUe,EAAMC,OAAOH,YAG3BhB,EAGA,mCACA,sBAAKa,UAAU,OAAf,UACE,+BAAI,mBAAGA,UAAU,uBAAjB,IAA4CX,KAC5C,6BAAKF,EAAKoB,OACV,gDAAmBpB,EAAKqB,YACxB,gDAAmBrB,EAAKsB,iBAP1B,oDCrBKC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCQSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f5e210b2.chunk.js","sourcesContent":["import React,{useEffect, useState} from \"react\";\r\nimport './css/style.css';\r\n\r\nconst Home = () => {\r\n\r\n  const [city, setCity] = useState('')\r\n  const [search, setSearch] = useState('london')\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async() => {\r\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=cb81455da3859180d99a4ed0ca994092`;\r\n      const response = await(fetch(url));\r\n      const resJson = await response.json();\r\n      setCity(resJson.main);\r\n    }\r\n    fetchApi();\r\n  }, [search]);\r\n\r\n  return(\r\n    <div className='d'>\r\n      <div className='box'>\r\n        <div className='search-bar'>\r\n          <input type=\"text\" placeholder='Enter City' \r\n          value={search}\r\n          className='search-input'\r\n          onChange={(event) => {\r\n              setSearch(event.target.value)\r\n          }}/>\r\n        </div>\r\n        {!city ? (\r\n          <p>No Data found</p>\r\n        ) : (\r\n          <>\r\n          <div className='info'>\r\n            <h1><i className=\"fas fa-street-view\"></i> {search}</h1>\r\n            <h2>{city.temp}</h2>\r\n            <h3>Minimum temp: {city.temp_min}</h3>\r\n            <h3>Maximum temp: {city.temp_max}</h3>          \r\n          </div>\r\n        </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n","import Home from \"./components/home\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}